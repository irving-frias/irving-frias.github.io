const mix = require('laravel-mix');
const glob = require('glob');
const htmlMinifier = require('html-minifier-terser');
const fs = require('fs');
const fs_extra = require('fs-extra');
const twig = require('twig');
const matter = require('gray-matter');
const chokidar = require('chokidar');
const path = require('path');

let compileTimeout;

// üöÄ **Compilar JavaScript**
function compileJS() {
    // Array of JavaScript files in the order you want them to be compiled
    const jsFiles = [
        'src/js/transform-urls.js',
        'src/js/main.js', // Ensure the main.js is last if it's the entry point
    ];

    // Compile the JS files in the specified order
    mix.js(jsFiles, 'dist/js/app.js')
   .minify('dist/js/app.js')
   //.version();

    console.log('‚úî JS compilado');
}


// üöÄ **Compilar SCSS**
function compileSCSS() {
    mix.sass('src/scss/main.scss', 'dist/css').options({
        postCss: [require('autoprefixer'), require('cssnano')({ preset: 'default' })],
    })
    //.version();
    console.log('‚úî SCSS compilado');
}

// üßπ **Limpiar la carpeta `dist/` antes de compilar**
function cleanDist() {
    if (fs.existsSync('dist')) {
        fs_extra.emptyDirSync('dist');
        console.log('üßπ Limpieza completa en /dist/');
    }
}

function convertPath(filePath) {
    const regex = /^(pages\/)(es\/)?(.*)\.twig$/;
    const matches = filePath.match(regex);

    if (matches) {
      const langPrefix = matches[2] ? `/${matches[2].slice(0, -1)}` : '';
      const pageName = matches[3] === 'index' ? '' : `/${matches[3]}`;
      return `${langPrefix}${pageName}`;
    }
    return null;
  }

// üìù **Compilar archivos Twig**
function compileTwig() {
    const files = glob.sync('pages/**/*.twig'); // Ensure we capture all twig files, including those in subfolders
    let routes = [];

    files.forEach((file) => {
        const fileContent = fs_extra.readFileSync(file, 'utf8');
        const parsed = matter(fileContent);
        const data = parsed.data;

        // Define output path based on file structure
        let outputPath = file.replace('pages/', 'dist/');
        let convertText = convertPath(file);
        convertText = convertText.length > 0 ? convertText : '/';
        routes.push(convertText);


        // Check if the file is in the 'es' folder and create the folder if necessary
        if (file.includes('/es/')) {
            const langFolder = 'es'; // Language folder name
            const fileName = file.replace('pages/es/', '').replace('.twig', '.html');
            outputPath = `dist/${langFolder}/${fileName}`;
        } else {
            outputPath = outputPath.replace('.twig', '.html');
        }

        // Ensure the directory exists before writing
        fs_extra.ensureDirSync(outputPath.substring(0, outputPath.lastIndexOf('/')));

        // Render the Twig file to HTML and write it to the output
        twig.renderFile(file, data, (err, html) => {
            if (err) {
                console.error(`‚ùå Error compiling ${file}:`, err);
                return;
            }
            fs_extra.writeFileSync(outputPath, html, 'utf8');
            console.log(`‚úî Rendered: ${outputPath}`);
        });
    });

    generateSitemap(routes);
    generateHtaccess(routes);
}

// ‚ö° **Minificar archivos HTML**
async function minifyHtml() {
    const files = glob.sync('dist/*.html');

    for (const file of files) {
        const content = fs.readFileSync(file, 'utf8');

        const minified = await htmlMinifier.minify(content, {
            collapseWhitespace: true,
            removeComments: true,
            removeRedundantAttributes: true,
            removeEmptyAttributes: true,
            minifyJS: true,
            minifyCSS: true,
        });

        fs.writeFileSync(file, minified, 'utf8');
    }

    console.log('‚úî Minificaci√≥n de HTML completada');
}

// üìù **Generar el archivo sitemap.xml**
function generateSitemap(routes) {
    let domain = 'https://irving-frias.github.io';
    let sitemapContent = `<?xml version="1.0" encoding="UTF-8"?>\n`;
    sitemapContent += `<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">\n`;

    routes.forEach((url) => {
        sitemapContent += `  <url>\n    <loc>${domain}${url}</loc>\n  </url>\n`;
    });

    sitemapContent += `</urlset>\n`;

    fs.writeFileSync('dist/sitemap.xml', sitemapContent, 'utf8');
    console.log('‚úî sitemap.xml file generated');
}

// üìù **Generar el archivo .htaccess**
function generateHtaccess(routes) {
    let htaccessContent = `
        # .htaccess file generated by Webpack build\n
        RewriteEngine On

        # Redirect index.html to root "/"
        RewriteCond %{THE_REQUEST} \s/index\.html [NC]
        RewriteRule ^index\.html$ / [R=301,L]

        # Remove .html from all URLs
        RewriteCond %{THE_REQUEST} \s(.+)\.html [NC]
        RewriteRule ^(.+)\.html$ /$1 [R=301,L]

        # Redirect /es/index.html to /es
        RewriteCond %{THE_REQUEST} \s/es/index\.html [NC]
        RewriteRule ^es/index\.html$ /es [R=301,L]

        # Remove .html from Spanish URLs (/es/*.html ‚Üí /es/*)
        RewriteCond %{THE_REQUEST} \s/es/(.+)\.html [NC]
        RewriteRule ^es/(.+)\.html$ /es/$1 [R=301,L]
    `;

    try {
        fs.writeFileSync('dist/.htaccess', htaccessContent, 'utf8');
        console.log('‚úî .htaccess file generated successfully');
    } catch (error) {
        console.error('‚ùå Error generating .htaccess file:', error);
    }
}


// üìÇ **Copiar la carpeta de assets si existe**
function copyAssets() {
    const assetsPath = path.resolve(__dirname, 'assets');
    const distPath = path.resolve(__dirname, 'dist/assets');

    if (fs.existsSync(assetsPath)) {
        fs_extra.ensureDirSync(distPath); // Asegura que la carpeta destino existe
        mix.copyDirectory(assetsPath, distPath);
        console.log('‚úî Archivos de assets copiados');
    } else {
        console.warn('‚ö† La carpeta assets no existe, no se copiaron archivos.');
    }
}

// üëÄ **Watcher para detectar cambios y recompilar autom√°ticamente**
function watchFiles() {
    chokidar.watch(['templates/**/*.twig', 'pages/*.twig', 'src/js/**/*.js', 'src/scss/**/*.scss'])
        .on('all', (event, path) => {
            console.log(`üîÑ ${event.toUpperCase()}: ${path}`);

            clearTimeout(compileTimeout);
            compileTimeout = setTimeout(async () => {
                console.log('üîÑ Cambios detectados, recompilando...');
                cleanDist();
                compileJS();
                compileSCSS();
                compileTwig();
                await minifyHtml();
                copyAssets();
            }, 300); // Debounce de 300ms
        });
}

// üèÅ **Ejecuci√≥n inicial**
(async () => {
    cleanDist();
    compileJS();
    compileSCSS();
    compileTwig();
    await minifyHtml();
    copyAssets();
})();
